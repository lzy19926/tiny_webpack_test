"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateRender = exports.render = void 0;
const createFiberTree_1 = require("../myJSX/createFiberTree");
const Reconciler_1 = require("./Reconciler");
const GlobalFiber_1 = require("./GlobalFiber");
//!--------------首屏Render方法-------------------
function firstRenderPart(elementTree, rootDom) {
    const rootFiber = (0, createFiberTree_1.createFiberTree)(elementTree, undefined);
    (0, createFiberTree_1.createAlternate)(rootFiber);
    return rootFiber;
}
function updateRenderPart(functionComponent, workInProgressFiber, currentFiber) {
    // 改变tag
    GlobalFiber_1.global.renderTag = 'update';
    //! 切换当前工作fiber 否则hook不起作用
    GlobalFiber_1.global.workInprogressFiberNode = workInProgressFiber;
    //todo -----------Scheduler  调度更新的优先级
    // diff的第一轮遍历,对比vnode和老fiber,如果可以复用就处理下一个节点(找不同 打tag)
    reconcileElement(functionComponent, workInProgressFiber);
    // 第二轮遍历fiber树 更新打完tag的节点 
    beginWorkFiber(workInProgressFiber);
    return workInProgressFiber;
}
//! 调和阶段    -----------! 重要 diff算法---------
//! 遍历生成的新vdom,老的vdom会被放到一个map里  key为节点的key(这也是为什么需要key的原因)
//! 通过检查新老vdom来给fiber打上标记,添加,删除,更新
function reconcileElement(functionComponent, workInProgressFiber) {
    const oldElement = workInProgressFiber._element.children[0]; // div
    const oldFiber = workInProgressFiber._child;
    const newElement = functionComponent(); //div
    // 拼接element树并替换rootFiber的_element
    workInProgressFiber._element.children[0] = newElement;
    newElement.fiber = oldFiber;
    oldFiber._element = newElement;
    oldFiber.alternate._element = newElement;
    reconcileElementLoop(oldElement, newElement);
}
function reconcileElementLoop(oldElement, newElement) {
    var _a, _b;
    // 如果是文本节点  退出
    // 如果老节点是添加节点的占位 退出
    if (typeof oldElement === 'undefined')
        return;
    if (newElement.tag === 'text' || oldElement.tag === 'text')
        return;
    // 生成设置key的节点Map
    const elementMap = createElementDiffingMap(oldElement);
    // 生成新的vdom  从保存的map中查找是否之前有过这个vdom,
    // 如果原先没有这个vdom, 则说明需要添加节点,  同时删除map中的vdom
    // 如果所有新的vdom处理完毕  map中还剩余老的vdom 说明剩余的需要删除
    // 遍历新节点 跟老节点进行diff
    for (let i = 0; i < newElement.children.length; i++) {
        let newEle = newElement.children[i];
        let oldEle = oldElement.children[i];
        let key = newEle.key;
        let isKeyNode = hasKey(key);
        let hasElement = elementMap.has(key);
        let isPlacement = isKeyNode && !hasElement;
        // 如果不需要添加  直接从老节点中拿来复用,打上update标签下阶段更新
        if (!isPlacement) {
            const oldFiber = oldEle.fiber;
            newEle.fiber = oldFiber;
            oldFiber._element = newEle;
            oldFiber.alternate._element = newEle;
            oldFiber.effectTag = 'Update';
            elementMap.delete(key);
        }
        // 如果节点有key且map中没有，说明需要添加
        if (isPlacement) {
            const parentFiber = newElement.fiber;
            const siblingBeforeFiber = (_b = (_a = newElement === null || newElement === void 0 ? void 0 : newElement.children) === null || _a === void 0 ? void 0 : _a[i - 1]) === null || _b === void 0 ? void 0 : _b.fiber;
            placementFiber(newEle, siblingBeforeFiber, parentFiber);
            oldElement.children.splice(i, 0, undefined); // 插入一个undefined进行占位
        }
    }
    // 本轮遍历结束 检查elementMap 如果还留有旧的vnode,则说明需要删除
    if (elementMap) {
        elementMap.forEach((element) => {
            var _a, _b;
            element.fiber.effectTag = 'Delete';
            element.fiber.alternate.effectTag = 'Delete';
            const needDeleteFiber = element.fiber;
            const index = oldElement.children.indexOf(element);
            const siblingBeforeFiber = (_b = (_a = oldElement === null || oldElement === void 0 ? void 0 : oldElement.children) === null || _a === void 0 ? void 0 : _a[index - 1]) === null || _b === void 0 ? void 0 : _b.fiber;
            //删除该节点
            deleteFiber(needDeleteFiber, siblingBeforeFiber);
            //从oldEle中删除该节点
            oldElement.children.splice(index, 1);
        });
    }
    //! 递归深入(这里需要上面处理完后再进行递归  大坑)
    newElement.children.forEach((newEle, index) => {
        let oldEle = oldElement.children[index];
        reconcileElementLoop(oldEle, newEle);
    });
}
// 校验key值
function hasKey(key) {
    return typeof key !== 'undefined' && key !== null;
}
// 生成设置key的节点Map
function createElementDiffingMap(oldElement) {
    const elementMap = new Map();
    oldElement.children.forEach((child) => {
        if (hasKey(child.key)) {
            elementMap.set(child.key, child);
        }
    });
    return elementMap;
}
//! -------遍历fiber,根据对应的effectTag更新操作------------------
function beginWorkFiber(workInProgressFiber) {
    if (workInProgressFiber.effectTag === 'Update') {
        const newEle = workInProgressFiber._element;
        workInProgressFiber.text = newEle.text;
        workInProgressFiber.tag = newEle.tag;
    }
    if (workInProgressFiber._child) {
        beginWorkFiber(workInProgressFiber._child);
    }
    if (workInProgressFiber._sibling) {
        beginWorkFiber(workInProgressFiber._sibling);
    }
}
//! 删除该fiber节点(遍历删除)
function deleteFiber(workInProgressFiber, siblingBeforeFiber) {
    const parentFiber = workInProgressFiber._parent;
    const nextSibling = workInProgressFiber._sibling;
    if (!siblingBeforeFiber) {
        parentFiber._child = nextSibling;
        parentFiber.alternate._child = nextSibling.alternate;
    }
    else {
        siblingBeforeFiber._sibling = nextSibling;
        siblingBeforeFiber.alternate._sibling = nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.alternate;
    }
    (0, Reconciler_1.pushEffectList)('Delete', workInProgressFiber);
}
// 创建并 从父节点处添加节点  如果有兄弟节点,则拼接二叉树
function placementFiber(newEle, siblingBeforeFiber, parentFiber) {
    // 创建新节点,打上tag标记
    const newFiberNode = (0, createFiberTree_1.createFiberTree)(newEle, parentFiber, 'Placement');
    (0, createFiberTree_1.createAlternate)(newFiberNode, 'Placement');
    // 判断fiber位置,添加fiber
    const newWkFiberNode = parentFiber.$fiber === '$1'
        ? newFiberNode
        : newFiberNode.alternate;
    if (!siblingBeforeFiber) {
        parentFiber._child = newWkFiberNode;
        parentFiber.alternate._child = newWkFiberNode.alternate;
    }
    else {
        const nextSibling = siblingBeforeFiber._sibling;
        siblingBeforeFiber._sibling = newWkFiberNode;
        siblingBeforeFiber.alternate._sibling = newWkFiberNode.alternate;
        newWkFiberNode._sibling = nextSibling;
        newWkFiberNode.alternate._sibling = nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.alternate;
    }
    return newEle;
}
//! -----------------模拟Commit阶段-----------------------------
//! 分为三部分  beforeMutation  mutation  layout阶段
//! before 前置处理  mutation 渲染dom节点   layout  处理useEffect useLayoutEffect
function commitPart(finishedWorkFiber) {
    beforeMutation(finishedWorkFiber); // beforeMutation阶段
    commitFiberNodeMutation(GlobalFiber_1.global.EffectList); //  mutation阶段 
    //todo  layout阶段  调用Effects链表 执行create函数()
    //todo 处理ref
}
function updateCommitPart(finishedWorkFiber) {
    beforeMutation(finishedWorkFiber); // beforeMutation阶段
    commitFiberNodeMutation(GlobalFiber_1.global.EffectList); // mutation阶段 
    //todo  layout阶段  调用Effects链表 执行create函数()
    //todo 处理ref
}
//! beforeMutation阶段 (将收集好的useEffect生成一个Effect 推入链表)
function beforeMutation(finishedWorkFiber) {
    (0, Reconciler_1.reconcileUseEffect)(finishedWorkFiber, null);
}
//! mutation阶段  遍历EffectList  对每个节点执行更新(分为添加  删除  更新 三大部分 )
//todo 遍历EffectList单链表 预留优先级调用 更新fiber
function commitFiberNodeMutation(EffectList, lane) {
    console.log('本次更新的EffectList', EffectList);
    let currentEffect = EffectList.firstEffect;
    // TODO 在这里将effect循环用requestAnimationFrame抱起来执行中断
    while (currentEffect !== null) {
        let effectTag = currentEffect.tag;
        let targetFiber = currentEffect.targetFiber;
        //! 经过相应处理 最后执行commitWork方法
        switch (effectTag) {
            case 'Placement': //todo  添加
                commitPlacement(targetFiber);
                break;
            case 'Delete': //todo  删除
                commitDeletion(targetFiber);
                break;
            case 'Update': //todo  更新
                commitUpdate(targetFiber);
                break;
            case 'UseEffect': //todo 调用了useEffect钩子
                commitUpdate(targetFiber);
            default:
                // commitUpdate(targetFiber) //todo 处理更新链表(effect链表和其他的effect应该是在一起的)
                break;
        }
        currentEffect = currentEffect.next;
    }
}
//todo 待完成 插入dom节点
function commitPlacement(finishedWorkFiber) {
    if (finishedWorkFiber.nodeType === 'HostComponent') {
        (0, createFiberTree_1.createDomElement)(finishedWorkFiber);
    }
    if (finishedWorkFiber.nodeType === 'HostText') {
        (0, createFiberTree_1.createTextElement)(finishedWorkFiber);
    }
}
// todo 不同类型的fiberNode执行不同的更新 (在这里处理useEffect链表)
function commitUpdate(finishedWorkFiber) {
    const fiberType = finishedWorkFiber.nodeType;
    switch (fiberType) {
        //todo 函数组件 处理effects链表  
        case 'FunctionComponent':
            //遍历effect更新链表  执行每个上一次的destory和本次create,并挂载destory
            //在之前finishedWork阶段已经将所有effects收集 挂载到finishedWorkFiber上
            callDestoryAndUnmountDestoryList(finishedWorkFiber);
            callCreateAndMountDestoryList(finishedWorkFiber);
            break;
        //todo App根组件 处理effects链表  
        case 'AppNode':
            callDestoryAndUnmountDestoryList(finishedWorkFiber);
            callCreateAndMountDestoryList(finishedWorkFiber);
            break;
        //todo dom节点  执行dom更新操作
        case 'HostComponent':
            commitUpdateDom(finishedWorkFiber);
            break;
        //todo text节点 单独更新
        case 'HostText':
            commitUpdateText(finishedWorkFiber);
    }
}
// todo 删除多余的currentFiber和dom节点
function commitDeletion(currentFiber) {
    // 删除dom节点
    const dom = currentFiber.stateNode;
    if (typeof dom !== 'function') {
        dom.remove();
    }
}
//todo 记录  我这里直接遍历fiber树  发现有需要变更的节点直接进行变更,
//todo 而react中在render阶段遍历 发现变更 打上tag  生成update , 推入effect链表中  为了实现优先级调度
// 错误记录 : 赋值dom节点新的text后   没有handleProps   
// 因为新的click函数的获取在这里   如果不执行  每次点击执行的都是上一次的点击事件 
// 所以不更新视图
// todo dom节点的更新
function commitUpdateDom(finishedWorkFiber) {
    const domElement = finishedWorkFiber.stateNode;
    if (typeof domElement === 'function')
        return;
    (0, createFiberTree_1.handleProps)(finishedWorkFiber, domElement);
}
//TODO text节点的更新
function commitUpdateText(finishedWorkFiber) {
    const domElement = finishedWorkFiber.stateNode;
    if (typeof domElement === 'function')
        return;
    (0, createFiberTree_1.handleProps)(finishedWorkFiber, domElement);
    // ! 比较text是否变化 变化则更改dom
    let fiberText = finishedWorkFiber.text;
    let domText = domElement.textContent;
    if (domText !== fiberText) {
        domElement.textContent = fiberText;
    }
}
//! 执行所有上一次挂载的destory  并销毁
function callDestoryAndUnmountDestoryList(finishedWorkFiber) {
    //! (此时生成了新的fiber  老fiber会被unmount) 所以destory是在组件unmount时执行的
    var updateQueue = finishedWorkFiber.updateQueue;
    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
    if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var currentEffect = firstEffect;
        do {
            //todo 判断是否需要执行 执行destory
            callDestoryByTag(currentEffect);
            currentEffect = currentEffect.next;
        } while (currentEffect !== firstEffect);
    }
}
//! 执行所有的create 挂载destory
function callCreateAndMountDestoryList(finishedWorkFiber) {
    const updateQueue = finishedWorkFiber.updateQueue;
    var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
    //todo do while遍历effect环链表 执行destory
    if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var currentEffect = firstEffect;
        do {
            //todo 判断是否需要执行 执行create
            callCreateByTag(currentEffect);
            currentEffect = currentEffect.next;
        } while (currentEffect !== firstEffect);
    }
}
//! 判断tag  执行create函数
function callCreateByTag(effect) {
    //判断effectTag决定是否执行Effect(mount和dep变更时执行)
    //React底层通过二进制来打tag
    const isFiberMount = Boolean(GlobalFiber_1.global.renderTag === 'mount');
    const isDepChange = Boolean(effect.tag === 'depChanged');
    const isNullDeps = Boolean(effect.tag === 'nullDeps');
    const isNoDeps = Boolean(effect.tag === 'noDeps');
    let needCallCreate = false;
    //根据不同情况 决定是否执行create 
    if ((isFiberMount || isDepChange || isNullDeps) || (isFiberMount && isNoDeps)) {
        needCallCreate = true;
    }
    //判断tag如果需要执行  执行create 挂载destory
    if (needCallCreate) {
        const create = effect.create;
        effect.destory = create();
    }
}
//! 判断tag  执行destory函数(需要修改)
function callDestoryByTag(effect) {
    //判断effectTag决定是否执行Effect(mount和dep变更时执行)
    //React底层通过二进制来打tag
    const isFiberMount = Boolean(GlobalFiber_1.global.renderTag === 'mount');
    const isDepChange = Boolean(effect.tag === 'depChanged');
    const isNullDeps = Boolean(effect.tag === 'nullDeps');
    const isNoDeps = Boolean(effect.tag === 'noDeps');
    let needCallDestory = false;
    //根据不同情况 决定是否执行create 
    if ((isFiberMount || isDepChange || isNullDeps) || (isFiberMount && isNoDeps)) {
        needCallDestory = true;
    }
    //判断tag如果需要执行  执行并销毁effect上的destory
    var destory = effect.destory;
    if (destory !== undefined && needCallDestory) {
        destory();
        effect.destory = undefined;
    }
}
//! ----------遍历fiber  收集effect 挂载到本次root节点 识别删除节点------------------
function finishedWork(workInProgressFiber, currentFiber) {
    // 遍历fiber树 将所有Effect添加进root节点的update环链表中
    const root = workInProgressFiber;
    let rootUpdateQueue = { lastEffect: null };
    finishedWorkLoop(workInProgressFiber, rootUpdateQueue);
    // 处理好的updateQueue成为到本次root节点的updateQueue
    root.updateQueue = rootUpdateQueue;
    return root;
}
//! 遍历fiber  拼接所有的effect   
function finishedWorkLoop(workInProgressFiber, rootUpdateQueue) {
    // 将updateQueue拼接到fiber的queue上
    collectEffect(workInProgressFiber, rootUpdateQueue);
    //TODO ---------diff两个节点 打上tag 生成Effect交给commit阶段更新------------
    (0, Reconciler_1.reconcileFiberNode)(workInProgressFiber, undefined);
    // 继续遍历fiber树  拼接链表 深度优先递归执行
    const childFiber = workInProgressFiber._child;
    const siblingFiber = workInProgressFiber._sibling;
    if (childFiber) {
        finishedWorkLoop(childFiber, rootUpdateQueue);
    }
    if (siblingFiber) {
        finishedWorkLoop(siblingFiber, rootUpdateQueue);
    }
}
//! 更新时的finishedWork(第一次不进入组件的sibling节点)
function updateFinishedWork(workInProgressFiber, currentFiber) {
    // 遍历fiber树 将所有Effect添加进root节点的update环链表中
    let rootUpdateQueue = { lastEffect: null };
    // 首屏不需要diff  更新需要进行diff计算
    updateFinishedWorkLoop(workInProgressFiber, currentFiber, rootUpdateQueue, 'first');
    // 处理好的updateQueue成为到本次root节点的updateQueue
    workInProgressFiber.updateQueue = rootUpdateQueue;
    return workInProgressFiber;
}
function updateFinishedWorkLoop(workInProgressFiber, currentFiber, rootUpdateQueue, tag) {
    // 拼接两个链表
    collectEffect(workInProgressFiber, rootUpdateQueue);
    //TODO ---------diff两个节点 打上tag 生成Effect交给commit阶段更新------------
    (0, Reconciler_1.reconcileFiberNode)(workInProgressFiber, currentFiber);
    // 继续遍历fiber树  拼接链表
    if (workInProgressFiber._child) {
        updateFinishedWorkLoop(workInProgressFiber._child, currentFiber._child, rootUpdateQueue);
    }
    if (workInProgressFiber._sibling && tag !== 'first') { // 第一次不进入组件节点的sibling
        updateFinishedWorkLoop(workInProgressFiber._sibling, currentFiber._sibling, rootUpdateQueue);
    }
}
//todo ----遍历清空fiber树上的hookIndex 和 queue 和 EffectTag
function resetFiber(fiber) {
    if (!fiber)
        return;
    fiber.hookIndex = 0;
    fiber.updateQueue = null;
    fiber.effectTag = undefined;
    GlobalFiber_1.global.EffectList = { firstEffect: null, lastEffect: null, length: 0 };
    GlobalFiber_1.global.destoryEffectsArr = [];
    if (fiber._child) {
        resetFiber(fiber._child);
    }
    if (fiber._sibling) {
        resetFiber(fiber._sibling);
    }
}
//! 将fiber的effect链表拼接到
function collectEffect(fiber, rootUpdateQueue) {
    if (!fiber)
        return;
    const fiberUpdateQueue = fiber.updateQueue;
    if (fiberUpdateQueue && fiberUpdateQueue.lastEffect) {
        rootUpdateQueue.lastEffect = fiberUpdateQueue.lastEffect;
        fiberUpdateQueue.lastEffect.next = rootUpdateQueue.lastEffect.next;
    }
}
//! ----------------首屏渲染----------------------------
function render(elementTree, rootDom) {
    console.log('------------first render-------------');
    const beginWorkFiber = firstRenderPart(elementTree, rootDom);
    // 从下往上遍历fiber收集所有的Effects 形成链表 上传递优先级给root
    //! 这里finishedWork应该在renderPart中  这里拆分出来了
    const finishedWorkFiber = finishedWork(beginWorkFiber, null);
    //todo commit阶段
    commitPart(finishedWorkFiber);
    console.log('首屏渲染生成的fiber', finishedWorkFiber);
    return finishedWorkFiber;
}
exports.render = render;
//! ----------------综合updateRender方法-------------------
function updateRender(functionComponent, workInProgressFiber, currentFiber) {
    console.log('------------update render-------------');
    //更新render时需要先将fiber的数据重置  重新挂载数据
    resetFiber(currentFiber);
    resetFiber(workInProgressFiber);
    // 更换workinProgress树 链接到当前vdom上
    connectElementAndWorkInProgress(workInProgressFiber);
    // 更新fiber树
    const beginWorkedFiber = updateRenderPart(functionComponent, workInProgressFiber, currentFiber);
    const finishedWorkedFiber = updateFinishedWork(beginWorkedFiber, currentFiber);
    updateCommitPart(finishedWorkedFiber);
}
exports.updateRender = updateRender;
//!-------- 将wkFiber树链接到当前element树上--------------
function connectElementAndWorkInProgress(workInProgressFiber) {
    const element = workInProgressFiber._element;
    element.fiber = workInProgressFiber;
    if (workInProgressFiber._child) {
        connectElementAndWorkInProgress(workInProgressFiber._child);
    }
    if (workInProgressFiber._sibling) {
        connectElementAndWorkInProgress(workInProgressFiber._sibling);
    }
}
