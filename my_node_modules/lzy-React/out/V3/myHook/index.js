"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.myUseImperativeHandle = exports.createContext = exports.myUseContext = exports.myUseRef = exports.myUseEffect = exports.myUseState = exports.switchHooksDispatcher = exports.resolveDispatcher = exports.ReactCurrentDispatcher = void 0;
const useState_1 = require("./useState");
const useEffect_1 = require("./useEffect");
Object.defineProperty(exports, "myUseEffect", { enumerable: true, get: function () { return useEffect_1.myUseEffect; } });
const useRef_1 = require("./useRef");
Object.defineProperty(exports, "myUseRef", { enumerable: true, get: function () { return useRef_1.myUseRef; } });
const useContext_1 = require("./useContext");
Object.defineProperty(exports, "myUseContext", { enumerable: true, get: function () { return useContext_1.myUseContext; } });
Object.defineProperty(exports, "createContext", { enumerable: true, get: function () { return useContext_1.createContext; } });
const useImperativeHandle_1 = require("./useImperativeHandle");
Object.defineProperty(exports, "myUseImperativeHandle", { enumerable: true, get: function () { return useImperativeHandle_1.myUseImperativeHandle; } });
// hook分为两种,mount和update, 在执行时会根据函数组件fiber类型获取不同的hookDispatcher,执行不同的hook
const HooksDispatcherOnMount = {
    useState: useState_1.mountState,
};
const HooksDispatcherOnUpdate = {
    useState: useState_1.updateState,
};
// 全局的hookDispatcher, 会根据hook的状态切换是mount还是update的Hook
exports.ReactCurrentDispatcher = {
    current: null,
};
// 获取当前的dispatcher
function resolveDispatcher() {
    const dispatcher = exports.ReactCurrentDispatcher.current;
    if (dispatcher === null) {
        console.error("Invalid hook call. Hook只能在函数组件中使用, 未正确挂载hookDsipatcher");
    }
    return dispatcher;
}
exports.resolveDispatcher = resolveDispatcher;
// 根据fiber状态切换钩子类型
function switchHooksDispatcher(fiberFlag) {
    exports.ReactCurrentDispatcher.current =
        fiberFlag === "mount"
            ? HooksDispatcherOnMount
            : HooksDispatcherOnUpdate;
}
exports.switchHooksDispatcher = switchHooksDispatcher;
function myUseState(initialState) {
    const dispatcher = resolveDispatcher();
    return dispatcher.useState(initialState);
}
exports.myUseState = myUseState;
