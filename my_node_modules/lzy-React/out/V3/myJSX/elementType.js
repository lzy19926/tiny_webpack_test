"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getComponentType = exports.getElementType = exports.isForwardRefEle = exports.isContextProviderEle = exports.isTextEle = exports.isDomEle = exports.isFunctionEle = exports.isElement = exports.ET = void 0;
const kindOf_1 = require("../utils/kindOf");
// element类型
exports.ET = {
    HOST_COMPONENT: 'lzyDomElement',
    HOST_TEXT: 'lzyTextElement',
    CONTEXT__PROVIDER: 'lzyContextProviderElement',
    FUNCTION_COMPONENT: 'lzyFuncionElement',
    // 额外包装类型 需要特殊处理
    MEMO_TYPE: 'lzyMemoComponent',
    FORWARD_REF_TYPE: 'lzyForwardRefComponent',
    UNKNOWN_TYPE: "UnknownType",
};
//todo ----------判断Element类型的方法------------------
function isElement(node) {
    return isFunctionEle(node)
        || isDomEle(node)
        || isTextEle(node)
        || isContextProviderEle(node)
        || isForwardRefEle(node);
}
exports.isElement = isElement;
function isFunctionEle(ele) {
    const t = ele.$$typeof;
    return (0, kindOf_1.kindOf)(t) === 'symbol' &&
        Symbol.keyFor(t) === exports.ET.FUNCTION_COMPONENT;
}
exports.isFunctionEle = isFunctionEle;
function isDomEle(ele) {
    const t = ele.$$typeof;
    return (0, kindOf_1.kindOf)(t) === 'symbol' &&
        Symbol.keyFor(t) === exports.ET.HOST_COMPONENT;
}
exports.isDomEle = isDomEle;
function isTextEle(ele) {
    const t = ele.$$typeof;
    return (0, kindOf_1.kindOf)(t) === 'symbol' &&
        Symbol.keyFor(t) === exports.ET.HOST_TEXT;
}
exports.isTextEle = isTextEle;
function isContextProviderEle(ele) {
    const t = ele.$$typeof;
    return (0, kindOf_1.kindOf)(t) === 'symbol' &&
        Symbol.keyFor(t) === exports.ET.CONTEXT__PROVIDER;
}
exports.isContextProviderEle = isContextProviderEle;
function isForwardRefEle(ele) {
    const t = ele.$$typeof;
    return (0, kindOf_1.kindOf)(t) === 'symbol' &&
        Symbol.keyFor(t) === exports.ET.FORWARD_REF_TYPE;
}
exports.isForwardRefEle = isForwardRefEle;
function getElementType(ele) {
    const t = ele.$$typeof;
    return (0, kindOf_1.kindOf)(t) === 'symbol' ? "UnknownType" : Symbol.keyFor(t);
}
exports.getElementType = getElementType;
//todo ------------ 判断createElement传入的节点类型方法---------------------
// Text类型节点只会在children中出现,不会在createElement中出现.进行特殊处理
function getComponentType(component) {
    if (typeof component === 'function')
        return exports.ET.FUNCTION_COMPONENT;
    if (typeof component === 'object' && isTextEle(component))
        return exports.ET.HOST_TEXT;
    if (typeof component === 'object' && isContextProviderEle(component))
        return exports.ET.CONTEXT__PROVIDER;
    if (typeof component === 'object' && isForwardRefEle(component))
        return exports.ET.FORWARD_REF_TYPE;
    if (typeof component === 'string')
        return exports.ET.HOST_COMPONENT;
    return 'unknowEleType';
}
exports.getComponentType = getComponentType;
