"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getComponentType = exports.isForwardRefEle = exports.isContextProviderEle = exports.isTextEle = exports.isDomEle = exports.isFunctionEle = exports.isElement = exports.FORWARD_REF_TYPE = exports.MEMO_TYPE = exports.FUNCTION_COMPONENT = exports.CONTEXT__PROVIDER = exports.HOST_TEXT = exports.HOST_COMPONENT = void 0;
const kindOf_1 = require("../utils/kindOf");
// element类型
exports.HOST_COMPONENT = 'lzyDomElement';
exports.HOST_TEXT = 'lzyTextElement';
exports.CONTEXT__PROVIDER = 'lzyContextProviderElement';
exports.FUNCTION_COMPONENT = 'lzyFuncionElement';
// 额外包装类型 需要特殊处理
exports.MEMO_TYPE = 'lzyMemoComponent';
exports.FORWARD_REF_TYPE = 'lzyForwardRefComponent';
//todo ----------判断Element类型的方法------------------
// 判断是否为Element
function isElement(node) {
    return isFunctionEle(node)
        || isDomEle(node)
        || isTextEle(node)
        || isContextProviderEle(node)
        || isForwardRefEle(node);
}
exports.isElement = isElement;
function isFunctionEle(ele) {
    const t = ele.$$typeof;
    return (0, kindOf_1.kindOf)(t) === 'symbol' &&
        Symbol.keyFor(t) === exports.FUNCTION_COMPONENT;
}
exports.isFunctionEle = isFunctionEle;
function isDomEle(ele) {
    const t = ele.$$typeof;
    return (0, kindOf_1.kindOf)(t) === 'symbol' &&
        Symbol.keyFor(t) === exports.HOST_COMPONENT;
}
exports.isDomEle = isDomEle;
function isTextEle(ele) {
    const t = ele.$$typeof;
    return (0, kindOf_1.kindOf)(t) === 'symbol' &&
        Symbol.keyFor(t) === exports.HOST_TEXT;
}
exports.isTextEle = isTextEle;
function isContextProviderEle(ele) {
    const t = ele.$$typeof;
    return (0, kindOf_1.kindOf)(t) === 'symbol' &&
        Symbol.keyFor(t) === exports.CONTEXT__PROVIDER;
}
exports.isContextProviderEle = isContextProviderEle;
function isForwardRefEle(ele) {
    const t = ele.$$typeof;
    return (0, kindOf_1.kindOf)(t) === 'symbol' &&
        Symbol.keyFor(t) === exports.FORWARD_REF_TYPE;
}
exports.isForwardRefEle = isForwardRefEle;
//todo ------------ 判断createElement传入的节点类型方法---------------------
// Text类型节点只会在children中出现,不会在createElement中出现.进行特殊处理
function getComponentType(component) {
    if (typeof component === 'function')
        return exports.FUNCTION_COMPONENT;
    if (typeof component === 'object' && isTextEle(component))
        return exports.HOST_TEXT;
    if (typeof component === 'object' && isContextProviderEle(component))
        return exports.CONTEXT__PROVIDER;
    if (typeof component === 'object' && isForwardRefEle(component))
        return exports.FORWARD_REF_TYPE;
    if (typeof component === 'string')
        return exports.HOST_COMPONENT;
    return 'unknowEleType';
}
exports.getComponentType = getComponentType;
