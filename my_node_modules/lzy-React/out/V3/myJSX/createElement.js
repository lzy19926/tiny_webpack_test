"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createElement = void 0;
const utils_1 = require("../myReactCore/utils");
// 通过解析来的JSX创建Element树
function createElement(...args) {
    let key;
    let ref;
    let children = [];
    const tag = args[0];
    const config = args[1];
    const childNodes = (0, utils_1.flatArray)(args.slice(2)); //子节点有可能是一个数组(Array.map()),需要展开
    let element;
    // 单独处理ref和key
    if (config) {
        ref = config.ref;
        key = config.key;
        // 删除属性
        config === null || config === void 0 ? true : delete config.ref;
        config === null || config === void 0 ? true : delete config.key;
    }
    // 处理tag为函数组件的情况(创建组件Element  执行函数并返回ElementNode)
    if (typeof tag === 'function') {
        let fc = tag;
        element = {
            $$typeof: Symbol.for('lzyElement'),
            tag: fc.name,
            ref: fc,
            key: (0, utils_1.isKey)(key) ? key : 'key_' + fc.name,
            props: config,
            children,
            fiber: undefined
        };
    }
    else {
        element = {
            $$typeof: Symbol.for('lzyElement'),
            tag,
            ref,
            key: (0, utils_1.isKey)(key) ? key : 'key_' + tag,
            props: config,
            children,
            fiber: undefined
        };
    }
    // 遍历处理childrenNode  生成用于diff的elementMap
    if (childNodes.length > 0) {
        childNodes.forEach((child, index) => {
            if ((0, utils_1.isElement)(child)) {
                child = child;
            }
            else {
                child = {
                    $$typeof: Symbol.for('lzyElement'),
                    tag: 'text',
                    text: child,
                    fiber: undefined,
                    key: (0, utils_1.isKey)(key) ? key : 'key_' + 'text',
                };
            }
            children.push(child);
        });
    }
    return element;
}
exports.createElement = createElement;
