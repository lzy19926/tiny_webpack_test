"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createElement = void 0;
const utils_1 = require("../utils/utils");
const elementType_1 = require("./elementType");
// 通过解析来的JSX创建Element树
function createElement(...args) {
    let key;
    let ref;
    let children = [];
    const tag = args[0];
    const config = args[1] || {};
    const childNodes = (0, utils_1.cleanArray)((0, utils_1.flatArray)(args.slice(2))); //子节点有可能是一个数组(Array.map()),需要展开,并去除空值
    // 单独处理ref和key
    if (config) {
        ref = config.ref;
        key = config.key;
        // 删除属性
        config === null || config === void 0 ? true : delete config.ref;
        config === null || config === void 0 ? true : delete config.key;
    }
    // 遍历childrenNode , 处理后推入children数组 
    childNodes.forEach((child, _) => {
        let childEle;
        if (!(0, elementType_1.isElement)(child)) {
            childEle = createTextElement(child);
        }
        else {
            childEle = child;
        }
        childEle && children.push(childEle);
    });
    return createElementByTag(tag, ref, key, config, children);
}
exports.createElement = createElement;
// 创建各种ele的方法
function createElementByTag(tag, ref, key, config, children) {
    let newElement;
    const type = (0, elementType_1.getComponentType)(tag);
    switch (type) {
        case elementType_1.FUNCTION_COMPONENT:
            let fc = tag;
            newElement = {
                $$typeof: Symbol.for(type),
                tag: fc.name,
                ref: fc,
                key: (0, utils_1.isKey)(key) ? key : 'key_' + fc.name,
                props: config,
                children,
                fiber: undefined
            };
            break;
        case elementType_1.HOST_COMPONENT:
            newElement = {
                $$typeof: Symbol.for(type),
                tag,
                ref,
                key: (0, utils_1.isKey)(key) ? key : 'key_' + tag,
                props: config,
                children,
                fiber: undefined
            };
            break;
        case elementType_1.CONTEXT__PROVIDER:
            newElement = {
                $$typeof: Symbol.for(type),
                tag: undefined,
                ref,
                key: (0, utils_1.isKey)(key) ? key : 'key_' + type,
                props: config,
                children,
                fiber: undefined
            };
            break;
        case elementType_1.HOST_TEXT:
            newElement = {
                $$typeof: Symbol.for(type),
                tag: 'text',
                text: tag.text,
                fiber: undefined,
                key: (0, utils_1.isKey)(key) ? key : 'key_' + type
            };
            break;
        default:
            break;
    }
    return newElement;
}
function createTextElement(text) {
    return {
        $$typeof: Symbol.for(elementType_1.HOST_TEXT),
        tag: 'text',
        text,
        fiber: undefined,
        key: 'key_' + elementType_1.HOST_TEXT
    };
}
