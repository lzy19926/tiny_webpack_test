"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFiberNodeFromDom = exports.patchFiberNodeToDom = exports.getFiberCurrentPropsFromDom = exports.updateFiberPropsToDom = exports.InternalInstanceKey = exports.InternalPropsKey = exports.DOCUMENT_FRAGMENT_NODE = exports.DOCUMENT_TYPE_NODE = exports.DOCUMENT_NODE = exports.COMMENT_NODE = exports.TEXT_NODE = exports.ELEMENT_NODE = void 0;
// -------------------HTMLDomType----------------------
exports.ELEMENT_NODE = 1;
exports.TEXT_NODE = 3;
exports.COMMENT_NODE = 8;
exports.DOCUMENT_NODE = 9;
exports.DOCUMENT_TYPE_NODE = 10;
exports.DOCUMENT_FRAGMENT_NODE = 11;
// 保存在Dom节点上的内部react属性
exports.InternalPropsKey = '__lzyReactProps$';
exports.InternalInstanceKey = '__lzyreactFiber$';
// todo -----------------修改Dom节点内部添加属性的方法------------------------
// 保存/更新props到Dom节点实例中 (Dom节点,Text节点,Suspence节点)
// 创建节点   和  commit中处理完props后  进行更新
function updateFiberPropsToDom(dom, props) {
    dom[exports.InternalPropsKey] = props;
}
exports.updateFiberPropsToDom = updateFiberPropsToDom;
// 从节点实例中获取当前的props (比如dom节点当前的click事件)
function getFiberCurrentPropsFromDom(dom) {
    return dom[exports.InternalPropsKey] || {};
}
exports.getFiberCurrentPropsFromDom = getFiberCurrentPropsFromDom;
// 给dom添加内部属性,挂载对应fiber
// 在CreateInstance时执行
function patchFiberNodeToDom(hostFiber, dom) {
    dom[exports.InternalInstanceKey] = hostFiber;
}
exports.patchFiberNodeToDom = patchFiberNodeToDom;
// 通过Dom获取最近的fiber(获取dom对应Fiber)
function getFiberNodeFromDom(dom) {
    return dom[exports.InternalInstanceKey] || null;
}
exports.getFiberNodeFromDom = getFiberNodeFromDom;
