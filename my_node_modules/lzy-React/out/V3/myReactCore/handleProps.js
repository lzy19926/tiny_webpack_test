"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleProps = void 0;
// 保存在节点上的内部属性
const internalPropsKey = '__lzyReactProps$';
// todo 处理并设置dom的Props 
function handleProps(fiber, dom) {
    // 获取本次渲染的props对象(上一次渲染的props保存在dom实例中)
    const nextProps = fiber._element.props;
    for (const propName in nextProps) {
        //todo  处理class 
        if (propName === 'className' || propName === 'class') {
            handleStyle(propName, dom, nextProps);
        }
        //todo 处理合成事件
        else if (propName[0] === 'o' && propName[1] === 'n') {
            handleEvent(propName, dom, nextProps);
        }
        // todo 处理其他
        else {
            dom.setAttribute(propName, nextProps[propName]);
        }
    }
    // 更新当前Dom上的props
    updateFiberPropsToDom(dom, nextProps);
}
exports.handleProps = handleProps;
// 保存/更新props到Dom节点实例中 (Dom节点,Text节点,Suspence节点)
// 创建节点   和  commit中处理完props后  进行更新
function updateFiberPropsToDom(node, props) {
    node[internalPropsKey] = props;
}
// 从节点实例中获取当前的props (比如dom节点当前的click事件)
function getFiberCurrentPropsFromDom(node) {
    return node[internalPropsKey] || {};
}
// todo --------处理合成事件-----------------
function handleEvent(propName, dom, nextProps) {
    // 大小写处理
    if (propName[2].toLowerCase() === propName[2]) {
        console.warn(`请使用on+大写字母替代${propName},实现与原生区分`);
    }
    // 处理捕获事件 : onClickCapture
    // 删除Capture后缀  删除on前缀 如果使用了capture后缀则在listener中捕获
    let eventName = propName.toLowerCase().replace(/capture$/, '');
    const useCapture = propName !== eventName;
    eventName = eventName.slice(2);
    // 获取dom中的上一个eventHandler,更新为新的
    let prevEventHandler = getFiberCurrentPropsFromDom(dom)[propName];
    let eventHandler = nextProps[propName];
    // 删除上一个监听器(更新函数引用)
    if (typeof prevEventHandler === 'function') {
        dom.removeEventListener(eventName, prevEventHandler, useCapture);
    }
    // 添加一个监听器(更新函数引用)
    if (typeof eventHandler === 'function') {
        dom.addEventListener(eventName, eventHandler, useCapture);
    }
    else {
        debugger;
        console.warn(`事件${propName}处理需要传递一个函数`);
    }
}
// todo ----------处理样式---------------
function handleStyle(propName, dom, nextProps) {
    // 可同时使用class和className
    if (propName["class"] && propName["className"]) {
        console.warn("请不要混用属性class和className");
    }
    const className = nextProps[propName];
    dom.setAttribute("class", className);
}
// ----废弃方法-----
{
    //! 对标签中的属性进行处理 给dom节点添加标签 (未完成)
    // 集中处理dom事件
    function handleProps2(fiber, dom) {
        const props = fiber._element.props;
        for (let key in props) {
            const value = props[key];
            switch (key) {
                //todo  处理class 
                case 'className':
                    dom.setAttribute("class", value);
                    break;
                //todo  处理各种事件
                case 'onClick':
                    dom.onclick = value;
                    break;
                case 'onMouseover':
                    dom.onmouseover = value;
                    break;
                case 'onMouseout':
                    dom.onmouseout = value;
                    break;
                case 'onChange':
                    dom.onchange = value;
                    break;
                //todo  处理其他
                default:
                    dom.setAttribute(key, value);
                    break;
            }
        }
    }
    //todo ------- 待处理dom事件
    // dom.onabort
    // dom.onanimationcancel
    // dom.onanimationend
    // dom.onanimationiteration
    // dom.onanimationstart
    // dom.onauxclick
    // dom.onblur
    // dom.oncanplay
    // dom.oncanplaythrough
    // dom.onchange
    // dom.onclick
    // dom.onclose
    // dom.oncontextmenu
    // dom.oncopy
    // dom.oncuechange
    // dom.oncut
    // dom.ondblclick
    // dom.ondrag
    // dom.ondragend
    // dom.ondragenter
    // dom.ondragleave
    // dom.ondragover
    // dom.ondragstart
    // dom.ondrop
    // dom.ondurationchange
    // dom.onemptied
    // dom.onended
    // dom.onerror
    // dom.onfocus
    // dom.onkeydown
    // dom.onkeyup
    // dom.onmousedown
    // dom.onmouseenter
    // dom.onmouseleave
    // dom.onmousemove
    // dom.onmouseout
    // dom.onmouseover
    // dom.onmouseup
    // dom.onselect
    // dom.onsubmit
    // dom.ontoggle
    // dom.onselect
}
