import type { ElementNode, TextElementNode, Global } from './Interface';
declare class FiberNode {
    memorizedState: any;
    tag: string;
    stateNode: Function | HTMLElement | Text | null;
    updateQueue: any;
    stateQueueTimer: any;
    fiberFlags: 'mount' | 'update' | undefined;
    effectTag: 'Update' | 'Delete' | 'Placement' | undefined;
    hasRef: boolean;
    text: any;
    sourcePool: any;
    hookIndex: number;
    nodeType: 'HostText' | 'HostComponent' | 'FunctionComponent' | 'AppNode' | 'ContextProvider' | undefined;
    $fiber: '$1' | '$2' | undefined;
    alternate: FiberNode | null;
    _child: FiberNode | null;
    _sibling: FiberNode | null;
    _parent: FiberNode | null;
    _element: ElementNode | TextElementNode;
    constructor(fiberFlags: any, $fiber: any);
}
declare const global: Global;
export { global, FiberNode };
