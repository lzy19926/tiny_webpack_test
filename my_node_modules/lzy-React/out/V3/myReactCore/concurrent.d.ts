export declare class WhileCodeCutter {
    yieldInterval: number;
    deadLine: number;
    isMessageChannelRunnig: boolean;
    scheduledHostCallBack: any;
    onWhileDone: Function;
    channel: MessageChannel;
    port: MessagePort;
    getCurrentTime: Function;
    shouldYieldToHost: Function;
    constructor();
    checkEnvironment(): void;
    requestHostCallback(cb: any): void;
    performWorkUntilDeadline(): void;
    While(getCondition: Function, handler: Function, yieldInterval?: number, afterWhile?: Function): void;
}
export declare function concurrentWhile(getCondition: Function, handler: Function, yieldInterval?: number, afterWhile?: Function): void;
export declare const concurrentWhileHook: {
    afterFirstReconcile: any;
    afterUpdateReconcile: any;
    afterFiberNodeMutation: any;
};
export declare function after_UpdateReconcile_Hook(callback: Function): void;
export declare function after_FirstReconcile_Hook(callback: Function): void;
export declare function after_FiberNodeMutation_Hook(callback: Function): void;
