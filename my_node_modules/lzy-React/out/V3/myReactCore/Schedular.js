"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pushEffectList = exports.diffUseEffect = exports.scheduleFiberNode = void 0;
const GlobalFiber_1 = require("./GlobalFiber");
const utils_1 = require("./utils");
//! diff计算更新节点综合方法
// 根据effectTag执行对应操作
function scheduleFiberNode(workInProgressFiber) {
    const tag = workInProgressFiber.effectTag;
    switch (tag) {
        case 'Placement':
            schedulePlacement(workInProgressFiber);
            break;
        case 'Delete':
            scheduleDeletion(workInProgressFiber);
            break;
        case 'Update':
            scheduleUpdate(workInProgressFiber);
            break;
    }
}
exports.scheduleFiberNode = scheduleFiberNode;
// 添加节点逻辑
function schedulePlacement(fiber) {
    pushEffectList('Placement', fiber);
}
// 删除节点逻辑
function scheduleDeletion(fiber) {
    removeFiber(fiber);
    pushEffectList('Delete', fiber);
}
// 更新节点逻辑
function scheduleUpdate(fiber) {
    const hasEvent = diffEvent(fiber);
    const isTextChange = diffText(fiber);
    fiber.text = fiber._element.text;
    if (hasEvent || isTextChange) {
        pushEffectList('Update', fiber);
    }
}
//! 更新事件
// TODO (重要)如果节点有挂载事件  需要更新这些事件(否则无法更新  事件引用不会变更)!!!!!!!!!
function diffEvent(workInProgressFiber) {
    var _a;
    const wkProps = (_a = workInProgressFiber === null || workInProgressFiber === void 0 ? void 0 : workInProgressFiber._element) === null || _a === void 0 ? void 0 : _a.props;
    if (!wkProps)
        return false;
    return wkProps.hasOwnProperty('onClick' || 'onMouseOver');
}
// 计算Text
function diffText(workInProgressFiber) {
    var _a, _b;
    if (!workInProgressFiber)
        return false;
    if ((0, utils_1.isEmpty)(workInProgressFiber.text) || (0, utils_1.isEmpty)((_a = workInProgressFiber === null || workInProgressFiber === void 0 ? void 0 : workInProgressFiber._element) === null || _a === void 0 ? void 0 : _a.text))
        return false;
    if (workInProgressFiber.text !== ((_b = workInProgressFiber === null || workInProgressFiber === void 0 ? void 0 : workInProgressFiber._element) === null || _b === void 0 ? void 0 : _b.text))
        return true;
}
// 从fiber树上移除单个节点
function removeFiber(fiber) {
    const parentFiber = fiber._parent;
    const nextSibling = fiber._sibling;
    const prevSibling = (0, utils_1.findPrevSiblingFiber)(fiber);
    // 第一个子节点的情况
    if (!prevSibling) {
        parentFiber._child = nextSibling;
        parentFiber.alternate._child = nextSibling.alternate;
    }
    // 有上一个兄弟节点的情况
    else {
        if (nextSibling) {
            prevSibling._sibling = nextSibling;
            prevSibling.alternate._sibling = nextSibling.alternate;
        }
    }
    // 推入一个effect commit阶段执行
    pushEffectList('Delete', fiber);
}
//! 判断是否有useEffect钩子调用
function diffUseEffect(workInProgressFiber) {
    var _a, _b;
    if (((_a = workInProgressFiber === null || workInProgressFiber === void 0 ? void 0 : workInProgressFiber.updateQueue) === null || _a === void 0 ? void 0 : _a.lastEffect) !== undefined && ((_b = workInProgressFiber === null || workInProgressFiber === void 0 ? void 0 : workInProgressFiber.updateQueue) === null || _b === void 0 ? void 0 : _b.lastEffect) !== null) {
        pushEffectList('Update', workInProgressFiber);
    }
}
exports.diffUseEffect = diffUseEffect;
//! 创建并添加Effect到EffectList
function pushEffectList(tag, targetFiber, callback) {
    const newEffect = {
        tag,
        targetFiber,
        callback: '暂定',
        next: null
    };
    //todo 链接到全局EffectList单链表
    const EffectList = GlobalFiber_1.global.EffectList;
    if (EffectList.firstEffect === null) {
        EffectList.firstEffect = newEffect;
        EffectList.lastEffect = newEffect;
    }
    else {
        EffectList.lastEffect.next = newEffect;
        EffectList.lastEffect = newEffect;
    }
    EffectList.length += 1;
}
exports.pushEffectList = pushEffectList;
