import type { FiberNode } from './GlobalFiber';
declare global {
    interface Window {
        $$routeContainerFiber?: any;
        $$lzyReactGlobal?: Global;
    }
}
type RefObject = {
    current: any;
} | null;
interface UseEffectHook {
    hookFlags: string;
    index: number;
    memorizedState: any;
    next: any;
}
interface Effect {
    tag: string;
    create: Function;
    destory: Function | null;
    deps: any[] | null;
    next: Effect | null;
}
interface UseStateHook {
    hookFlags: string;
    index: number;
    memorizedState: any;
    updateStateQueue: {
        pending: any;
    };
    next: any;
}
interface StateUpdater {
    action: Function | any;
    next: StateUpdater | null;
}
interface Global {
    workInprogressFiberNode: FiberNode | null;
    workInProgressHook: {
        currentHook: any;
    };
    EffectList: {
        firstEffect: any;
        lastEffect: any;
        length: number;
    };
    LayoutEffectList: {
        firstEffect: any;
        lastEffect: any;
        length: number;
    };
    destoryEffectsArr: Effect[];
    renderTag: 'update' | 'mount';
    isFirstRenderDone: boolean;
    islzySyntheticEventSystemOpen: boolean;
}
type ElementNode = BaseElementNode | TextElementNode;
type BaseElementNode = {
    $$typeof: symbol;
    tag: string;
    fiber: FiberNode;
    children: (ElementNode | TextElementNode)[];
    elementMap?: Map<any, ElementNode | TextElementNode>;
    ref?: any;
    props?: Record<any, any>;
    key?: string;
    text?: string;
};
type TextElementNode = {
    $$typeof: symbol;
    tag: 'text';
    text: string;
    fiber: FiberNode;
    children?: (ElementNode | TextElementNode)[];
    elementMap?: Map<any, ElementNode | TextElementNode>;
    ref?: any;
    props?: any;
    key?: string;
};
export type { FiberNode, StateUpdater, Effect, UseStateHook, UseEffectHook, Global, ElementNode, TextElementNode, RefObject };
