interface Effect {
    tag: string;
    create: Function;
    destory: Function | null;
    deps: any[] | null;
    next: Effect | null;
}
interface FiberNode {
    memorizedState: any;
    stateNode: Function | HTMLElement | null;
    updateQueue: any;
    stateQueueTimer: any;
    fiberFlags: 'mount' | 'update' | undefined;
    hasRef: boolean;
    ref: any;
    children: any;
    props: any;
    tag: any;
    text: any;
    sourcePool: any;
    hookIndex: number;
    parentNode: FiberNode | null;
    nodeType: 'HostText' | 'HostComponent' | 'FunctionComponent' | 'AppNode' | undefined;
    alternate: FiberNode | null;
    $fiber: '$1' | '$2' | undefined;
    key: number | null;
}
interface Global {
    workInprogressFiberNode: FiberNode | null;
    workInProgressHook: {
        currentHook: any;
    };
    EffectList: {
        firstEffect: any;
        lastEffect: any;
        length: number;
    };
    destoryEffectsArr: Effect[];
    renderTag: string;
}
declare const global: Global;
declare function myUseEffect(create: Function, deps?: any[]): void;
declare function myUseState(initialState: any): any[];
declare function render(functionComponent: Function, rootDom: any): any;
declare function updateRender(functionComponent: Function, workInProgressFiber: FiberNode, currentFiber: FiberNode): any;
export { myUseState, myUseEffect, render, updateRender, global };
