import type { FiberNode, Global } from './Interface';
declare class NewFiberNode implements FiberNode {
    memorizedState: any;
    stateNode: Function | HTMLElement | null;
    updateQueue: any;
    stateQueueTimer: any;
    fiberFlags: 'mount' | 'update' | undefined;
    hasRef: boolean;
    ref: any;
    children: any;
    props: any;
    tag: any;
    text: any;
    sourcePool: any;
    hookIndex: number;
    parentNode: FiberNode | null;
    nodeType: 'HostText' | 'HostComponent' | 'FunctionComponent' | 'AppNode' | undefined;
    alternate: FiberNode | null;
    $fiber: '$1' | '$2' | undefined;
    key: number | null;
    constructor(fiberFlags: any, $fiber: any);
}
declare const global: Global;
declare function updateWorkInProgressHook(fiber: FiberNode): any;
export { global, updateWorkInProgressHook, NewFiberNode };
