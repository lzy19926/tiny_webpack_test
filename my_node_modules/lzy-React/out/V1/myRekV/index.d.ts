import { // 判断是否为对象
InitState, // 状态接口
RekvDelegate, // 拦截器接口
DeepReadonly, // 深层只读数据类型(array obj)
MapEffects, // 映射导出effects中定义的函数
SubscribeCallback } from './utils';
export interface ConstructorArgs {
    allStates: InitState;
    effects?: {
        [key: string]: (this: Pick<Rekv<InitState, any>, 'currentState' | 'setState' | 'on' | 'off'>, ...args: any[]) => void;
    };
}
export declare class Rekv<T extends InitState, // 初始化state类型
E = {
    [key: string]: (// 
    this: Pick<Rekv<T, any>, 'currentState' | 'setState' | 'on' | 'off'>, ...args: any[]) => void;
}> {
    static delegate: RekvDelegate<Rekv<any, any>, any>;
    delegate: RekvDelegate<this, Partial<T>>;
    effects: MapEffects<E>;
    private _events;
    private _updateId;
    private _state;
    private _inDelegate;
    constructor(args: ConstructorArgs);
    on<K extends keyof T>(name: K, callback: SubscribeCallback<T[K]>): void;
    off<K extends keyof T>(name: K, callback: SubscribeCallback<T[K]>): void;
    setState(param: Partial<T> | ((s: T) => Partial<T>)): void;
    useState: <K extends keyof T>(...keys: K[]) => DeepReadonly<T>;
    get currentState(): DeepReadonly<T>;
    getCurrentState(): DeepReadonly<T>;
    updateComponents<K extends keyof T>(...keys: K[]): void;
}
export default Rekv;
