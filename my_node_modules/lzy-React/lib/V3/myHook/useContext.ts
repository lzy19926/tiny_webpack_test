type ReactContextProvider = {
  $$typeof: symbol,
  _context: ReactContext
}

type ReactContext = {
  $$typeof: symbol,
  _currentValue: any,
  _threadCount: number,
  Provider: ReactContextProvider
}

//! 总结:useContext直接返回当前dispatcher中的context对象
// 返回current
export function myUseContext(Context: ReactContext) {
  return Context._currentValue
}


export function createContext(defaultValue: any): ReactContext {
  //todo 创建context对象
  const context: ReactContext = {
    $$typeof: Symbol.for('lzyContextProviderElement'),
    _currentValue: defaultValue,
    _threadCount: 0,
    Provider: null,
  };

  //todo 创建Provider对象(vdom)(函数式组件使用)
  context.Provider = {
    $$typeof: Symbol.for('lzyContextProviderElement'),
    _context: context
  }

  return context;
}


//! ------------useAge-----------------
// 创建上下文并包裹
// const MyContext = createContext(defaultValue);


// <MyContext.Provider value={/* some value */}>
//   <MyComponent />
// </MyContext.Provider>


// 在组件中获取上下文的值
// import React, { useContext } from 'react';

// function MyComponent() {
//   const myValue = useContext(MyContext);
//    ...
// }