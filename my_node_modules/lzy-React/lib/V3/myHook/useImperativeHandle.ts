import { logger } from "../utils/logger";


export function myUseImperativeHandle(ref: Function | { current: any }, create: Function, deps: any[]) {
  if (typeof create !== 'function') {
    return logger.error('myUseImperativeHandle()的二号参数应当是一个函数');
  }
  if (ref !== null && ref !== undefined) {
    return logger.log('myUseImperativeHandle()未接收到ref')
  }

/*******************************************************************************************
 * 核心逻辑,执行传入的create函数,生成instance挂载到ref上
 * 该Hook的返回值一个destroy函数, 删除ref.current,
 * 同useEffect一样,在初始化的时候执行create函数,下一个render时执行destroy函数, 与useEffect共用一组调用队列
 * *****************************************************************************************/
  const instance = create()

  if (typeof ref === 'function') {
    ref(instance)
    return () => {
      ref(null)
    }
  } else {
    ref.current = instance
    return () => {
      ref.current = null
    }
  }

}