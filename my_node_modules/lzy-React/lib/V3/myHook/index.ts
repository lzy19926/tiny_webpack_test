import { mountState, updateState } from './useState'
import { myUseEffect } from './useEffect'
import { myUseRef } from './useRef'
import { myUseContext, createContext } from './useContext'
import { myUseImperativeHandle } from './useImperativeHandle'


// hook分为两种,mount和update, 在执行时会根据函数组件fiber类型获取不同的hookDispatcher,执行不同的hook

const HooksDispatcherOnMount = {
  useState: mountState,
}

const HooksDispatcherOnUpdate = {
  useState: updateState,
}


// 全局的hookDispatcher, 会根据hook的状态切换是mount还是update的Hook
export const ReactCurrentDispatcher = {
  current: null,
};

// 获取当前的dispatcher
export function resolveDispatcher() {
  const dispatcher = ReactCurrentDispatcher.current

  if (dispatcher === null) {
    console.error("Invalid hook call. Hook只能在函数组件中使用, 未正确挂载hookDsipatcher")
  }

  return dispatcher
}

// 根据fiber状态切换钩子类型
export function switchHooksDispatcher(fiberFlag: "mount" | "update") {
  ReactCurrentDispatcher.current =
    fiberFlag === "mount"
      ? HooksDispatcherOnMount
      : HooksDispatcherOnUpdate
}



export function myUseState(initialState: any) {
  const dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}




export {
  myUseEffect,
  myUseRef,
  myUseContext,
  createContext,
  myUseImperativeHandle
}