import { ElementNode, TextElementNode } from '../myReactCore/Interface'
import { flatArray, isKey, cleanArray } from '../utils/utils'
import {
    FUNCTION_COMPONENT,
    HOST_COMPONENT,
    HOST_TEXT,
    CONTEXT__PROVIDER,
    getComponentType,
    isElement
} from './elementType'



// 通过解析来的JSX创建Element树
export function createElement(...args: any[]): ElementNode {
    
    let key;
    let ref;
    let children = [];
    const tag = args[0]
    const config = args[1] || {}
    const childNodes = cleanArray(flatArray(args.slice(2)))   //子节点有可能是一个数组(Array.map()),需要展开,并去除空值

    // 单独处理ref和key
    if (config) {
        ref = config.ref
        key = config.key
        // 删除属性
        delete config?.ref
        delete config?.key
    }

    // 遍历childrenNode , 处理后推入children数组 
    childNodes.forEach((child, _) => {
        let childEle: ElementNode

        if (!isElement(child)) {
            childEle = createTextElement(child)
        } else {
            childEle = child
        }

        childEle && children.push(childEle)
    })

    return createElementByTag(
        tag,
        ref,
        key,
        config,
        children
    )
}

// 创建各种ele的方法
function createElementByTag(
    tag: any,
    ref: unknown,
    key: string,
    config: Object,
    children: ElementNode[]
) {
    let newElement: ElementNode;
    const type = getComponentType(tag)

    switch (type) {
        case FUNCTION_COMPONENT:
            let fc = tag
            newElement = {
                $$typeof: Symbol.for(type),
                tag: fc.name,
                ref: fc,
                key: isKey(key) ? key : 'key_' + fc.name,
                props: config,
                children,
                fiber: undefined
            }
            break;
        case HOST_COMPONENT:
            newElement = {
                $$typeof: Symbol.for(type),
                tag,
                ref,
                key: isKey(key) ? key : 'key_' + tag,
                props: config,
                children,
                fiber: undefined
            }
            break;
        case CONTEXT__PROVIDER:
            newElement = {
                $$typeof: Symbol.for(type),
                tag: undefined,
                ref,
                key: isKey(key) ? key : 'key_' + type,
                props: config,
                children,
                fiber: undefined
            }
            break;
        case HOST_TEXT:
            newElement = {
                $$typeof: Symbol.for(type),
                tag: 'text',
                text: tag.text,
                fiber: undefined,
                key: isKey(key) ? key : 'key_' + type
            }
            break;
        default:
            break;
    }

    return newElement
}

function createTextElement(text: string): TextElementNode {
    return {
        $$typeof: Symbol.for(HOST_TEXT),
        tag: 'text',
        text,
        fiber: undefined,
        key: 'key_' + HOST_TEXT
    }
}







