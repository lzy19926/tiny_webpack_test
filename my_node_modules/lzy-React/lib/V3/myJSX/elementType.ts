import { kindOf } from '../utils/kindOf'

// element类型
export const HOST_COMPONENT = 'lzyDomElement'
export const HOST_TEXT = 'lzyTextElement'
export const CONTEXT__PROVIDER = 'lzyContextProviderElement'
export const FUNCTION_COMPONENT = 'lzyFuncionElement'
export const UNKNOWN_TYPE = "UnknownType"
// 额外包装类型 需要特殊处理
export const MEMO_TYPE = 'lzyMemoComponent'
export const FORWARD_REF_TYPE = 'lzyForwardRefComponent'

export type ElementType =
  typeof HOST_COMPONENT
  | typeof HOST_TEXT
  | typeof CONTEXT__PROVIDER
  | typeof FUNCTION_COMPONENT
  | typeof UNKNOWN_TYPE



//todo ----------判断Element类型的方法------------------
export function isElement(node: any) {
  return isFunctionEle(node)
    || isDomEle(node)
    || isTextEle(node)
    || isContextProviderEle(node)
    || isForwardRefEle(node)
}
export function isFunctionEle(ele: any): boolean {
  const t = ele.$$typeof
  return kindOf(t) === 'symbol' &&
    Symbol.keyFor(t) === FUNCTION_COMPONENT
}
export function isDomEle(ele: any): boolean {
  const t = ele.$$typeof
  return kindOf(t) === 'symbol' &&
    Symbol.keyFor(t) === HOST_COMPONENT
}
export function isTextEle(ele: any): boolean {
  const t = ele.$$typeof
  return kindOf(t) === 'symbol' &&
    Symbol.keyFor(t) === HOST_TEXT
}
export function isContextProviderEle(ele: any): boolean {
  const t = ele.$$typeof
  return kindOf(t) === 'symbol' &&
    Symbol.keyFor(t) === CONTEXT__PROVIDER
}
export function isForwardRefEle(ele: any): boolean {
  const t = ele.$$typeof
  return kindOf(t) === 'symbol' &&
    Symbol.keyFor(t) === FORWARD_REF_TYPE
}
export function getElementType(ele: any): string {
  const t = ele.$$typeof
  return kindOf(t) === 'symbol' ? "UnknownType" : Symbol.keyFor(t)
}

//todo ------------ 判断createElement传入的节点类型方法---------------------
// Text类型节点只会在children中出现,不会在createElement中出现.进行特殊处理
export function getComponentType(component: any) {

  if (typeof component === 'function') return FUNCTION_COMPONENT

  if (typeof component === 'object' && isTextEle(component)) return HOST_TEXT

  if (typeof component === 'object' && isContextProviderEle(component)) return CONTEXT__PROVIDER

  if (typeof component === 'object' && isForwardRefEle(component)) return FORWARD_REF_TYPE

  if (typeof component === 'string') return HOST_COMPONENT

  return 'unknowEleType'
}
