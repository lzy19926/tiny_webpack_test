import { kindOf } from '../utils/kindOf'

export const FUNCTION_COMPONENT = 'lzyFuncionElement'
export const HOST_COMPONENT = 'lzyDomElement'
export const HOST_TEXT = 'lzyTextElement'
export const CONTEXT__PROVIDER = 'lzyContextProviderElement'


//todo ----------判断Element类型的方法------------------
// 判断是否为Element
export function isElement(node: any) {
    return isFunctionEle(node)
        || isDomEle(node)
        || isTextEle(node)
        || isContextProviderEle(node)
}
export function isFunctionEle(ele: any): boolean {
    const t = ele.$$typeof
    return kindOf(t) === 'symbol' &&
        Symbol.keyFor(t) === FUNCTION_COMPONENT
}
export function isDomEle(ele: any): boolean {
    const t = ele.$$typeof
    return kindOf(t) === 'symbol' &&
        Symbol.keyFor(t) === HOST_COMPONENT
}
export function isTextEle(ele: any): boolean {
    const t = ele.$$typeof
    return kindOf(t) === 'symbol' &&
        Symbol.keyFor(t) === HOST_TEXT
}
export function isContextProviderEle(ele: any): boolean {
    const t = ele.$$typeof
    return kindOf(t) === 'symbol' &&
        Symbol.keyFor(t) === CONTEXT__PROVIDER
}

//todo ------------ 判断createElement传入的节点类型方法---------------------
// Text类型节点只会在children中出现,不会在createElement中出现.进行特殊处理
export function getComponentType(component: any) {

    if (typeof component === 'function') return FUNCTION_COMPONENT

    if (typeof component === 'object' && isTextEle(component)) return HOST_TEXT

    if (typeof component === 'object' && isContextProviderEle(component)) return CONTEXT__PROVIDER

    if (typeof component === 'string') return HOST_COMPONENT

    return 'unknowEleType'
}




