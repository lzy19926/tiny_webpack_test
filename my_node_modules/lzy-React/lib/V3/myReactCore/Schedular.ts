import { FiberNode } from './Interface'
import { global } from './GlobalFiber'
import { isEmpty, findPrevSiblingFiber } from './utils'



//! diff计算更新节点综合方法
// 根据effectTag执行对应操作
export function scheduleFiberNode(workInProgressFiber: FiberNode) {
    const tag = workInProgressFiber.effectTag
    switch (tag) {
        case 'Placement':
            schedulePlacement(workInProgressFiber)
            break;
        case 'Delete':
            scheduleDeletion(workInProgressFiber)
            break;
        case 'Update':
            scheduleUpdate(workInProgressFiber)
            break;
    }
}

// 添加节点逻辑
function schedulePlacement(fiber: FiberNode) {
    pushEffectList('Placement', fiber)
}

// 删除节点逻辑
function scheduleDeletion(fiber: FiberNode) {
    removeFiber(fiber)
    pushEffectList('Delete', fiber)
}

// 更新节点逻辑
function scheduleUpdate(fiber: FiberNode) {
    const hasEvent = diffEvent(fiber)
    const isTextChange = diffText(fiber)

    fiber.text = fiber._element.text

    if (hasEvent || isTextChange) {
        pushEffectList('Update', fiber)
    }
}

//! 更新事件
// TODO (重要)如果节点有挂载事件  需要更新这些事件(否则无法更新  事件引用不会变更)!!!!!!!!!
function diffEvent(workInProgressFiber: FiberNode) {
    const wkProps = workInProgressFiber?._element?.props
    if (!wkProps) return false
    return wkProps.hasOwnProperty('onClick' || 'onMouseOver')
}

// 计算Text
function diffText(workInProgressFiber: FiberNode) {
    if (!workInProgressFiber) return false
    if (isEmpty(workInProgressFiber.text) || isEmpty(workInProgressFiber?._element?.text)) return false
    if (workInProgressFiber.text !== workInProgressFiber?._element?.text) return true
}

// 从fiber树上移除单个节点
function removeFiber(fiber: FiberNode) {
    const parentFiber = fiber._parent
    const nextSibling = fiber._sibling
    const prevSibling = findPrevSiblingFiber(fiber)
    // 第一个子节点的情况
    if (!prevSibling) {
        parentFiber._child = nextSibling
        parentFiber.alternate._child = nextSibling.alternate
    }
    // 有上一个兄弟节点的情况
    else {
        if (nextSibling) {
            prevSibling._sibling = nextSibling
            prevSibling.alternate._sibling = nextSibling.alternate
        }
    }

    // 推入一个effect commit阶段执行
    pushEffectList('Delete', fiber)
}

//! 判断是否有useEffect钩子调用
export function diffUseEffect(workInProgressFiber: FiberNode) {
    if (workInProgressFiber?.updateQueue?.lastEffect !== undefined && workInProgressFiber?.updateQueue?.lastEffect !== null) {
        pushEffectList('Update', workInProgressFiber)
    }
}

//! 创建并添加Effect到EffectList
export function pushEffectList(tag: string, targetFiber: FiberNode, callback?: Function) {
    const newEffect = {
        tag, // Effect的类型
        targetFiber, // 需要执行的fiber节点
        callback: '暂定',
        next: null
    }
    //todo 链接到全局EffectList单链表
    const EffectList = global.EffectList

    if (EffectList.firstEffect === null) {
        EffectList.firstEffect = newEffect
        EffectList.lastEffect = newEffect
    } else {
        EffectList.lastEffect.next = newEffect
        EffectList.lastEffect = newEffect
    }
    EffectList.length += 1
}

