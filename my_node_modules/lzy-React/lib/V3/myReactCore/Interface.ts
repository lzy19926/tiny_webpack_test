import type { FiberNode } from './GlobalFiber'
export type { FiberNode }

//全局变量声明
declare global {
  interface Window {
    $$routeContainerFiber?: any
    $$lzyReactGlobal?: Global
  }
}

//!------------Ref容器结构--------------
export type RefObject = { current: any } | null

//!--------------单个UseEffectHook结构-------------------
//todo 通过判断tag 'useEffect','useLayoutEffect' 来判断何种钩子  改变执行时机
export interface UseEffectHook {
  hookFlags: string,
  index: number,
  memorizedState: any,
  next: any
}

//!------------单个Effect(EffectUpdater)结构--------------------
export interface Effect {
  tag: string,
  create: Function,
  destroy: Function | null,
  deps: any[] | null,
  next: Effect | null,
}

//!-------------单个useStateHook结构-----------------
export interface UseStateHook {
  hookFlags: string,
  index: number,
  memorizedState: any,
  updateStateQueue: { pending: any },//! hook.queue中保存了需要执行的update
  next: any
}

//!-------------单个StateUpdater结构--------------------
export interface StateUpdater {
  action: Function | any,
  next: StateUpdater | null
}


//!-------------全局需要的变量结构---------------
export interface Global {
  workInprogressFiberNode: FiberNode | null,
  workInProgressHook: { currentHook: any },
  EffectList: { firstEffect: any, lastEffect: any, length: number },
  LayoutEffectList: { firstEffect: any, lastEffect: any, length: number },
  destoryEffectsArr: Effect[],
  renderTag: 'update' | 'mount',
  isFirstRenderDone: boolean,
  islzySyntheticEventSystemOpen: boolean, // 是否开启合成事件系统
}

//! -------------element结构----------------
export type ElementNode = HostElementNode | TextElementNode | FunctionElementNode

export type HostElementNode = {
  $$typeof: symbol
  tag: string
  fiber: FiberNode
  children: (ElementNode | TextElementNode)[]
  ref?: any
  props?: Record<any, any>
  key?: string
  text?: string
}

export type TextElementNode = {
  $$typeof: symbol
  tag: 'text'
  text: string
  fiber: FiberNode
  children?: (ElementNode | TextElementNode)[]
  ref?: any
  props?: any
  key?: string
}

export type FunctionElementNode = {
  $$typeof: symbol
  tag: string
  fiber: FiberNode
  render: Function
  children?: (ElementNode | TextElementNode)[]
  ref?: any
  props?: Record<any, any>
  key?: string
  text?: string
}
