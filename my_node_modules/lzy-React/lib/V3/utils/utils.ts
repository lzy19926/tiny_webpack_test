import { FiberNode, ElementNode } from '../myReactCore/Interface'


// 判断是否为空值
export function isEmpty(value: any) {
    return typeof value === 'undefined' || value === null
}

// 找到上一个兄弟节点
export function findPrevSiblingFiber(fiber: FiberNode) {
    const parentFiber = fiber._parent
    if (!parentFiber) return undefined
    if (parentFiber._child === fiber) return undefined

    let prev;
    let current = parentFiber._child
    while (current !== fiber) {
        prev = current
        current = current._sibling
    }

    return prev
}

//! ----------拿取需要本次update需要更新的hook----------------------
export function updateWorkInProgressHook(fiber: FiberNode) {

    let index = fiber.hookIndex
    let currentHook = fiber.memorizedState

    while (currentHook && currentHook.index != index) {
        currentHook = currentHook.next
    }
    // 因为链表是按顺序的 所以这个函数每执行一次就新增一个
    fiber.hookIndex += 1
    return currentHook
}

// 插入dom到某个dom节点后
export function insertAfter(newDom: HTMLElement | Text, targetDom: HTMLElement | Text) {
    let parDom = targetDom.parentNode
    let lastDom = parDom.lastChild
    if (lastDom === targetDom) {
        parDom.appendChild(newDom)
    } else {
        let nextDom = targetDom.nextSibling
        parDom.insertBefore(newDom, nextDom)
    }
}

// 判断是否是DOM对象
export function isHTMLElement(obj: any) {
    return (typeof HTMLElement === 'object')
        ? obj instanceof HTMLElement
        : obj && typeof obj === 'object' && obj.nodeType === 1 && typeof obj.nodeName === 'string'
}

// ----------向上找到父dom节点---------------------
export function getParentDom(fiber: FiberNode): HTMLElement {
    let parentNode = fiber
    let parentDom;

    if (!parentNode) {
        return document.getElementById('root')
    }

    // 如果是function或者provider
    while (!isHTMLElement(parentDom)) {
        parentNode = parentNode._parent
        if (!parentNode) {
            return document.getElementById('root')
        }
        parentDom = parentNode.stateNode
    }

    return parentDom
}

// ---------校验key值--------------
export function hasKey(element: ElementNode) {
    if (element.key.toString().split('_')[0] === 'key') {
        return false
    }
    return typeof element.key !== 'undefined' && element.key !== null
}

// ---------校验key值--------------
export function isKey(key: any) {
    return typeof key !== 'undefined' && key !== null
}

// 递归-数组扁平化
export function flatArray(arr: any[], resultArr: any[] = []) {
    for (const item of arr) {
        if (Array.isArray(item)) {
            flatArray(item, resultArr)
        } else {
            resultArr.push(item)
        }
    }
    return resultArr
}

// 数组除去空值
export function cleanArray(arr: any[]) {
    return arr.filter((item) => {
        return item
    });
}
