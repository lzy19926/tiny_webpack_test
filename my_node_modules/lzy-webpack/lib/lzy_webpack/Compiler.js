/*
Compiler：是一个桥接webpack和插件之间的接口。
它负责读取配置文件、创建编译器实例、启动编译过程等。在webpack启动时，它会被创建一次，并在整个编译生命周期中保持不变。
*/

const Compilation = require('./Compilation')
const { SyncHook } = require('../lzy_tapable/lib/index')
// 插件集
const NodeEnvironmentPlugin = require('../plugins/NodeEnvironmentPlugin')

class Compiler {
    constructor(webpackConfig) {

        this.hooks = {
            initSync: new SyncHook(),
            environmentSync: new SyncHook()
        }

        this.config = webpackConfig
        this._lastCompilation = undefined

        // 文件系统(通过插件注入)
        this.watchFileSystem = undefined      // 文件监视系统
        this.memoFileSystem = undefined       // 内存文件系统
        this.InputFileSystem = undefined      // 缓存文件系统
        this.OutputFileSystem = undefined     // 输出文件系统

        this.init()
    }

    // 初始化
    init() {
        this.registSystemPlugins()
        this.callInitSyncHook()
        this.callEnvironmentSyncHook()
    }

    // 注册系统内置插件(按顺序执行)
    registSystemPlugins() {
        new NodeEnvironmentPlugin().run(this)
    }

    // 执行各Hook回调
    callInitSyncHook() {
        this.hooks.initSync.call()
    }
    callEnvironmentSyncHook() {
        this.hooks.environmentSync.call()
    }

    // 清除当前Compilation
    cleanUpLastCompilation() {
        if (this._lastCompilation !== undefined) {
            this._lastCompilation = undefined;
        }
    }

    // 创建单个Compilation
    createCompilation() {
        this.cleanUpLastCompilation()

        const params = {}

        const compilation = new Compilation(this, params);
        this._lastCompilation = compilation

        return compilation
    }

    // 执行打包
    compile() {
        const compilation = this.createCompilation()
        compilation.bundle()
    }
}


module.exports = Compiler 