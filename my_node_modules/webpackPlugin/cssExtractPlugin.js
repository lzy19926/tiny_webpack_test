const path = require('path')
const fs = require('fs')
const Chunk = require('../lzy-webpack/lib/core/Chunk')
class CssExtractPlugin {
    constructor({ fileName }) {
        this.fileName = fileName || 'index.css'
    }

    createCSSChunk(compilation) {
        // 生成chunk
        const chunk = new Chunk({
            name: 'bundle.css',
            type: "css",
        })

        // 给chunk添加模块
        const modules = compilation.buildQueue
        for (let m of modules) {
            if (m.type == "css") {
                chunk.addModule(m)
            }
        }

        compilation.chunks.set('bundle.css', chunk)
        return chunk
    }

    packCSSModule(cssChunk, compilation) {

        let cssCode = ``
        const modules = cssChunk.modules

        for (let [path, module] of modules) {
            compilation.renderProgressBar(`打包模块${path}`); //! ------------------------进度显示

            const fileContent = fs.readFileSync(path, 'utf-8')
            module.originCode = fileContent
            module.sourceCode = fileContent
            module.update()
            cssCode += fileContent + '\n\n'
        }

        cssChunk.code = cssCode
        cssChunk.update()
        
        return cssCode
    }

    outputCSS(compilation, callNext) {
        const cssChunk = this.createCSSChunk(compilation)
        const cssCode = this.packCSSModule(cssChunk, compilation)
        const filePath = path.join(compilation.config.output, this.fileName)
        fs.writeFileSync(filePath, cssCode)

        return cssChunk
    }

    run(compilation) {
        //todo 将extractCSS注册到webpack的afterDistSync钩子队列  打包时执行 
        const handler = this.outputCSS.bind(this, compilation)
        compilation.hooks.ChunkSync.tap("cssExtractPlugin", handler)
    }
}


module.exports = CssExtractPlugin