
import LzyReact, { myUseEffect } from 'lzy-react'

export default function SideListPage(props) {
    const { dataSource } = props
    const renderMap = {}

    // 启动列表
    myUseEffect(() => {
        $('#treeMenu').tree({
            animate: true,
        });
    })


    // 递归遍历树 收集render函数到map中
    const collectRenders = (items) => {
        items.forEach(({ render, key, children }) => {
            if (render && key) {
                renderMap[key] = render
            }
            if (Array.isArray(children)) {
                collectRenders(children)
            }
        });
    }
    collectRenders(dataSource)


    const ListItem = (props) => {
        if (!props.dataSource) return console.error('需要传入dataSource')
        const {
            key = '',
            title = '',
            render,
            children,
            onClick = () => { }
        } = props.dataSource

        // 用户点击事件
        const customClick = () => {
            onClick()
        }
        //通过Jquery解决菜单高亮冲突问题
        const heighLightItem = (e) => {
            const tar = e.target.getAttribute('data-target')
            $('#treeMenu').on('click', 'a', function () {
                $('#treeMenu li.active').removeClass('active');
                $(this).closest('li').addClass('active');
                $(tar).siblings().removeClass('active').addClass('fade')
                $(tar).removeClass('fade').addClass('active')
            });
        }
        // 点击时才渲染页面内容

        // 合成点击事件
        const handleItemClick = (e) => {
            heighLightItem(e)
            customClick()
        }

        if (children && children.length) {
            return (
                <li >
                    <a href="#">{title}</a>
                    <ul>
                        {children.map(childItem => <ListItem key={childItem.key} dataSource={childItem} />)}
                    </ul>
                </li>
            )
        }
        else {
            return (
                <li>
                    <a
                        onClick={handleItemClick}
                        href="#"
                        data-target={'#' + key}
                        data-toggle="tab">
                        {title}
                    </a>
                </li>
            )
        }
    }

    const listRender = () => {
        return (
            <nav class="menu" data-ride="menu">
                <ul id="treeMenu" class="tree tree-menu" data-animate="true" style='border:none'>
                    {dataSource.map(item => <ListItem key={item.key} dataSource={item} />)}
                </ul>
            </nav>
        )
    }

    const contentRender = () => {
        return (
            <div class="tab-content">
                {Object.keys(renderMap).map(key => {
                    return (
                        (
                            <div class="tab-pane fade" id={key} key={key} >
                                {renderMap[key]()}
                            </div>
                        )
                    )
                })}
            </div>
        )
    }

    return (
        <div style="position:fixed;top:60px" className='sideNavContainer'>
            <div class="col-xs-2 sideNavList">
                {listRender()}
            </div>
            <div class="sideNavContent row scrollbar-hover col-xs-10" style="overflow: scroll;">
                {contentRender()}
            </div >
        </div>
    )
}
